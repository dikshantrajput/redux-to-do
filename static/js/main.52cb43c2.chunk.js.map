{"version":3,"sources":["components/Form.js","actions/index.js","actions/constants.js","App.js","reducers/todo.js","reducers/index.js","store.js","index.js"],"names":["Form","titleRef","useRef","calenderRef","dispatch","useDispatch","state","useSelector","todo","className","onSubmit","e","preventDefault","indianTimeZoneVal","Date","current","value","toLocaleString","timeZone","indainDateObj","setHours","getHours","setMinutes","getMinutes","deadline","toDateString","data","title","type","payload","addToDo","ref","placeholder","required","min","getFullYear","getMonth","slice","getDate","map","item","completed","date","onClick","id","htmlFor","onChange","App","store","action","month","day","length","Math","max","apply","getDay","filter","index","allReducers","combineReducers","todoreducer","currentState","localStorage","getItem","JSON","parse","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52cb43c2.chunk.js","sourcesContent":["import React , { useRef } from 'react'\r\nimport { useSelector , useDispatch } from 'react-redux'\r\nimport { addToDo , removeToDo, toggleToDo } from '../actions'\r\nimport './form.css'\r\n\r\nfunction Form(){\r\n    const titleRef = useRef(null)\r\n    const calenderRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const state = useSelector(state => state.todo)\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        var indianTimeZoneVal = new Date(calenderRef.current.value).toLocaleString('en-US', {timeZone: 'Asia/Kolkata'});\r\n        var indainDateObj = new Date(indianTimeZoneVal);\r\n        indainDateObj.setHours(indainDateObj.getHours() + 5);\r\n        indainDateObj.setMinutes(indainDateObj.getMinutes() + 30);\r\n        const deadline = (indainDateObj.toDateString());\r\n        const data = {\r\n            title : titleRef.current.value,\r\n            deadline\r\n        }\r\n        dispatch(addToDo(data))\r\n        titleRef.current.value = ''\r\n        calenderRef.current.value = ''\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form__container\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>Title:</label>\r\n                    <input className=\"form__control\" ref={titleRef} type=\"text\" placeholder=\"Title...\" required />\r\n                    <label>Deadline:</label>\r\n                    <input className=\"form__control\" ref={calenderRef} type=\"date\" required min={new Date().getFullYear() + '-' + (\"0\" + (new Date().getMonth()+1)).slice(-2) + '-' + (\"0\" + new Date().getDate()).slice(-2) } />\r\n                    <input className=\"form__submit\" type=\"submit\" value=\"Add\" />\r\n                </form>    \r\n            </div> \r\n            <div className=\"cards__container\">\r\n                {\r\n                    state.map((item)=>{\r\n                        return (\r\n                            <div className={`card ${item.completed ? 'active' : null}`} key={item.id}>\r\n                                <div className=\"card__title\">{item.title}</div>\r\n                                <span className=\"date\">{item.date}</span>&emsp;\r\n                                <span className=\"deadline\">{item.deadline}</span>&emsp;\r\n                                <span className=\"delete__card\" onClick={()=>dispatch(removeToDo(item))}>&times;</span>\r\n                                <div className=\"toggle__container\">\r\n                                    <label htmlFor={`toggle${item.id}`}>\r\n                                        <div className={`switch ${item.completed ? 'active' : null}`}></div>\r\n                                    </label>\r\n                                    <input id={`toggle${item.id}`} type=\"checkbox\" onChange={()=>dispatch(toggleToDo(item))} />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form","import { ADD_TODO , REMOVE_TODO , TOGGLE_TODO } from './constants'\r\n\r\nexport const addToDo = (data) =>{\r\n    return {\r\n        type: ADD_TODO,\r\n        payload: {\r\n            title : data.title,\r\n            deadline : data.deadline,\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeToDo = (data)=>{\r\n    return {\r\n        type : REMOVE_TODO,\r\n        payload : {\r\n            id : data.id\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleToDo = (data)=>{\r\n    return{\r\n        type : TOGGLE_TODO,\r\n        payload : data.id\r\n    }\r\n}","export const ADD_TODO = \"ADD_TODO\"\r\nexport const REMOVE_TODO = \"REMOVE_TODO\"\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\"","import React from 'react'\r\nimport Form from './components/Form'\r\nimport './app.css'\r\n\r\nfunction App(){\r\n    return (\r\n        <>\r\n        <div className=\"body__wrapper\">\r\n            <h1>ADD TO DO</h1>\r\n            <Form />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App","function todo(store=[] , action){\r\n    const date = new Date()\r\n    const month = ['Jan' , 'Feb' , 'March' , 'Apr' , 'May' ,'June' , 'July' , 'Aug' , 'Sep' , 'Oct'  , 'Nov' , 'Dec']\r\n    const day = ['Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' ,'Sat' , 'Sun']\r\n    switch(action.type){\r\n        case \"ADD_TODO\":\r\n            return [\r\n                    ...store , { \r\n                        id: store.length > 0 ? Math.max.apply(null,store.map((item)=> item.id))+1 : 1 ,\r\n                        title : action.payload.title ,\r\n                        completed: false,\r\n                        deadline: action.payload.deadline,\r\n                        date : day[(date.getDay()) - 1] + ' ' + month.filter((item,index)=>index === date.getMonth()) + ' ' + ('0'+date.getDate()).slice(-2) + ' ' + date.getFullYear() \r\n                    }\r\n                ]\r\n        \r\n        case \"REMOVE_TODO\":\r\n            return store.filter((item)=> action.payload.id !== item.id)\r\n        \r\n        case \"TOGGLE_TODO\":\r\n            return store.map((item)=>{\r\n                if(item.id !== action.payload){\r\n                    return item\r\n                }else{\r\n                    return {\r\n                        ...item,\r\n                        completed : !item.completed\r\n                    }\r\n                }\r\n            })\r\n            \r\n        default:\r\n            return store \r\n    }\r\n}\r\n\r\nexport default todo","import todoreducer from './todo'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst allReducers = combineReducers({\r\n    todo:todoreducer\r\n})   \r\n\r\nexport default allReducers","import { createStore } from 'redux'\r\nimport allReducers from './reducers'\r\n\r\nconst currentState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {} \r\nconst store = createStore(allReducers,currentState,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nstore.subscribe(()=>{\r\n    localStorage.setItem('reduxState',JSON.stringify(store.getState()))\r\n})\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}